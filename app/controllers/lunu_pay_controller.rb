require 'net/https'
require 'base64'
require 'json'
require 'time'

APP_ID = '149ec6da-f0dc-4cdf-9fb3-8ba2dc602f60'
API_SECRET = '23d93cac-000f-5000-8000-126728f15140'

# Your callback url should be here
CALLBACK_URL = 'https://your-site.com/lunu_pay/notify'

AUTH_TOKEN = Base64.strict_encode64(APP_ID + ':' + API_SECRET)

LUNUPAY_ENDPOINT = 'https://alpha.lunu.io/api/v1/payments/'
LUNUPAY_URL_CREATE = LUNUPAY_ENDPOINT + 'create'
LUNUPAY_URL_GET = LUNUPAY_ENDPOINT + 'get/'
LUNUPAY_DEFAULT_EXPIRES = 360


def get_my_order_by_id(order_id)

  # Your code should be here.

  # Secret token generated by your engine for this order.
  my_order_secret_token = '3858f62230ac3c915f300c664312c63f'

  # ID generated by your engine for this order.
  my_order_id = rand(9999999999).to_s + '_' + Time.new.to_i.to_s
  {
    :id => my_order_id,
    :amount => 3,
    :token => my_order_secret_token,
    :currency => 'EUR'
  }
end


def lunu_payment_create(params)
  order_id = params[:order_id]
  token = params[:token]

  uri = URI(LUNUPAY_URL_CREATE)
  req = Net::HTTP::Post.new(uri, {
    'Authorization': 'Basic ' + AUTH_TOKEN,
    'Idempotence-Key': order_id,
    'Content-Type': 'application/json'
  })

  req.body = {
    :callback_url => CALLBACK_URL + '?order_id=' + order_id + '&token=' + token,
    :amount => params[:amount],
    :description => 'Order #' +  order_id,
    :expires => Time.at(Time.new.to_i + LUNUPAY_DEFAULT_EXPIRES).iso8601(3),
    :test => false
  }.to_json
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true
  res = http.request(req)

  res.body
end


def lunu_payment_check(params)
  payment_status = params[:status].to_s.downcase;
  payment_id = params[:id].to_s;
  amount = params[:amount].to_s;
  currency = params[:currency].to_s;

  if payment_id == '' or payment_status != 'paid'
    return nil
  end

  # checking payment on server
  uri = URI(LUNUPAY_URL_GET + payment_id)
  req = Net::HTTP::Post.new(uri, {
    'Authorization': 'Basic ' + AUTH_TOKEN,
    'Content-Type': 'application/json'
  })
  req.body = '{}'
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true
  res = http.request(req)

  if res.code != '200'
    return nil
  end

  data = JSON.parse(res.body)
  response = data['response']

  if response == nil
    return nil
  end

  if response['status'].to_s.downcase != 'paid'
    return nil
  end

  return response
end


class LunuPayController < ApplicationController

  skip_before_action :verify_authenticity_token, :only => [:notify]

  def notify

    # getting an order at your shop engine
    my_order = get_my_order_by_id(params[:order_id].to_s)
    if my_order == nil
      render json: nil
      return
    end


    if my_order[:token] != params[:token].to_s
      render json: nil
      return
    end

    # checking payment on server
    payment = lunu_payment_check(params)
    if payment == nil
      render json: nil
      return
    end

    # Your additional validation code should be here.
    if my_order[:amount].to_s != payment['amount'] or my_order[:currency] != payment['currency']
      render json: nil
      return
    end

    # Your notification code should be here.

    render body: '{}', content_type: 'application/json; charset=utf-8'
  end

  def create
    # getting an order at your shop engine
    my_order = get_my_order_by_id(params[:order_id].to_s)

    if my_order == nil
      render json: {
        :error => {
          :message => 'Order not found'
        }
      }
      return;
    end

    render body: lunu_payment_create({
      :order_id => my_order[:id],
      :token => my_order[:token],
      :amount => my_order[:amount]
    }), content_type: 'application/json; charset=utf-8'
  end

end
